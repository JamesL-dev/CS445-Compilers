// print a node without a newline
void printTreeNode(FILE *listing,
                   TreeNode *tree,
                   bool showExpType,
                   bool showAllocation)
{
   // print a declaration node
    if (tree->nodekind == DeclK) {
   switch (tree->kind.decl) {
   case VarK:
            printf("Var: %s ", tree->attr.name);
            printf("of %s", expTypeToStr(tree->type, tree->isArray, tree->isStatic));
            if (showAllocation) {
                printf(" [mem: %s loc: %d size: %d]", varKindToStr(tree->varKind), tree->offset, tree->size);
            }
       break;
   case FuncK:
            printf("Func: %s ", tree->attr.name);
            printf("returns %s", expTypeToStr(tree->type, tree->isArray, tree->isStatic));
            if (showAllocation) {
                printf(" [mem: %s loc: %d size: %d]", varKindToStr(tree->varKind), tree->offset, tree->size);
            }
       break;
   case ParamK:
            printf("Parm: %s ", tree->attr.name);
            printf("of %s", expTypeToStr(tree->type, tree->isArray, tree->isStatic));
            if (showAllocation) {
                printf(" [mem: %s loc: %d size: %d]", varKindToStr(tree->varKind), tree->offset, tree->size);
            }
       break;
   default:
       fprintf(listing, "Unknown declaration node kind: %d",
          tree->kind.decl);
       break;
   }
    }

    // print a statement node
    else if (tree->nodekind == StmtK) {
   switch (tree->kind.stmt) {
   case IfK:
       fprintf(listing, "If");
       break;
   case WhileK:
       fprintf(listing, "While");
       break;
   case CompoundK:
       fprintf(listing, "Compound");
            if (showAllocation) {
                printf(" [mem: %s loc: %d size: %d]", varKindToStr(tree->varKind), tree->offset, tree->size);
            }
       break;
        case ForK:
       fprintf(listing, "For");
            if (showAllocation) {
                printf(" [mem: %s loc: %d size: %d]", varKindToStr(tree->varKind), tree->offset, tree->size);
            }
       break;
        case RangeK:
       fprintf(listing, "Range");
       break;
   case ReturnK:
       fprintf(listing, "Return");
       break;
   case BreakK:
       fprintf(listing, "Break");
       break;
   default:
       fprintf(listing, "Unknown  statement node kind: %d",
          tree->kind.stmt);
       break;
   }
    }

    // print an expression node
    else if (tree->nodekind == ExpK) {
   switch (tree->kind.exp) {
   case AssignK:
       fprintf(listing, "Assign: %s", tokenToStr(tree->attr.op));
       break;
   case OpK:
       fprintf(listing, "Op: %s", tokenToStr(tree->attr.op));
       break;
   case ConstantK:
            switch (tree->type) {
            case Boolean:
      fprintf(listing, "Const %s", (tree->attr.value) ?  "true" : "false");
                break;
            case Integer:
      fprintf(listing, "Const %d", tree->attr.value);
                break;
            case Char:
                if (tree->isArray) {
                    fprintf(listing, "Const ");
                    printf("\"");
                    for (int i=0; i<tree->size-1; i++) {
                        printf("%c", tree->attr.string[i]);
                    }
                    printf("\"");
                }
      else fprintf(listing, "Const '%c'", tree->attr.cvalue);
                break;
            case Void:
            case UndefinedType:
                fprintf(listing, "SYSTEM ERROR: parse tree contains invalid type for constant: %s\n", expTypeToStr(tree->type));
       }
       break;
   case IdK:
       fprintf(listing, "Id: %s", tree->attr.name);
       break;
   case CallK:
       fprintf(listing, "Call: %s", tree->attr.name);
       break;
   default:
       fprintf(listing, "Unknown expression node kind: %d", tree->kind.exp);
       break;
   }
   if (showExpType) {
       fprintf(listing, " of %s", expTypeToStr(tree->type, tree->isArray, tree->isStatic));
   }
        if (showAllocation) {
            if (tree->kind.exp == IdK || tree->kind.exp == ConstantK && tree->type == Char && tree->isArray) {
                printf(" [mem: %s loc: %d size: %d]", varKindToStr(tree->varKind), tree->offset, tree->size);
            }
        }
    }
    else fprintf(listing, "Unknown class of node: %d",
       tree->nodekind);

    fprintf(listing, " [line: %d]", tree->lineno);
}

